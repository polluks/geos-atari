MEMORY {
	START:        start = $2000, size = $1000, file = %O;
	DRIVE:        start = $9000, size = $0D80, file = %O; # disk driver (RAM drive)
	LOKERNAL:     start = $9D80, size = $0280, file = %O;
	#COLOR_MATRIX: start = $8C00, size = $03E8;            # placeholder
	SPRITES_BUF:  start = $8FE8, size = $0018;
	ICONS:        start = $BF78, size = $0088, file = %O; # on C64: $BF40 with $C0 size
	KERNALHDRREL: start = $3000, size = $0100, file = %O, define = yes; # move to KERNALHDR
	KERNALRELOCL: start = $3100, size = $0F00, file = %O, define = yes; # move to KERNALL
	KERNALRELOCH: start = $4000, size = $2700, file = %O, define = yes; # move to KERNALH
	INPUTDRVRELOC:start = $6700, size = $017A, file = %O, define = yes; # move to INPUTDRV
	BANK0RELOC:   start = $A000, size = $4000, file = %O, define = yes; # move to ATARI_EXPBASE in bank0

	BANK0:        start = $4000, size = $4000, define = yes; # 4000, banked Kernal code
	KERNALHDR:    start = $C000, size = $0100, define = yes; # C000
	KERNALL:      start = $C100, size = $0F00, define = yes; # C100 = jumptab
	PLAYERS:      start = $8C00, size = $0400, define = yes; # sprite data
	KERNALH:      start = $D800, size = $2680, define = yes; # D800
	INPUTDRV:     start = $FE80, size = $017A, define = yes; # input driver
	VARS:         start = $86C0, size = $0940;
}

FILES {
	%O: format = atari;
}

FORMATS {
	atari: runad = _ResetHandle;
}

SEGMENTS {
	vars:               load = VARS, type = bss;

	# start: $5000-
	start:              load = START, type = ro;
	ramexp1:            load = START, type = ro;
	displaylistinit:    load = START, type = ro;

	# Atari sprite data (shadow registers above color matrix)
	spritebuf:          load = SPRITES_BUF, type = bss;
	# Atari sprite image data (buffer)
	players:            load = PLAYERS, type = bss;

	# ramdisk driver $9000-$9D80
	drive:              load = DRIVE, type = ro;

	# lokernal: $9D80-$9FFF
	files1a2a:          load = LOKERNAL, type = ro;
	files1a2b:          load = KERNALRELOCH, run = KERNALH, type = ro;
	files1b:            load = KERNALRELOCH, run = KERNALH, type = ro;
	serial1:            load = LOKERNAL, type = ro;
	ramexp2:            load = ICONS, type = ro;
	displaylist:        load = LOKERNAL, type = ro;

	# icons: $BF40-$BFFF
	mouseptr:           load = ICONS, type = ro;

	# kernal header: $c000
	header:             load = KERNALHDRREL, run = KERNALHDR, type = ro, offset = $0000;

	# ...
	tobasic2:           load = KERNALHDRREL, run = KERNALHDR, type = ro;
	mainloop1:          load = KERNALHDRREL, run = KERNALHDR, type = ro;
	files2:             load = LOKERNAL, run = LOKERNAL, type = ro;
	dlgbox2:            load = KERNALHDRREL, run = KERNALHDR, type = ro;

	# kernal jump table: $c100
	jumptab:            load = KERNALRELOCL, run = KERNALL, type = ro;

	# kernal code
	mainloop3:          load = KERNALRELOCH, run = KERNALH, type = ro;
	bitmask1:           load = KERNALRELOCH, run = KERNALH, type = ro;
	bitmask2:           load = KERNALRELOCH, run = KERNALH, type = ro;
	bitmask3:           load = KERNALRELOCH, run = KERNALH, type = ro;
	files3:             load = KERNALRELOCH, run = KERNALH, type = ro;
	load1a:             load = KERNALRELOCH, run = KERNALH, type = ro;
	load1b:             load = KERNALRELOCH, run = KERNALH, type = ro;
	load1c:             load = KERNALRELOCH, run = KERNALH, type = ro;
	load1d:             load = KERNALRELOCH, run = KERNALH, type = ro;
	init1:              load = LOKERNAL, run = LOKERNAL, type = ro;
	hw1b:               load = LOKERNAL, run = LOKERNAL, type = ro;
	graph1:             load = KERNALRELOCH, run = KERNALH, type = ro;
	init2:              load = LOKERNAL, run = LOKERNAL, type = ro;
	memory1a:           load = KERNALRELOCH, run = KERNALH, type = ro;
	memory1b:           load = KERNALRELOCH, run = KERNALH, type = ro;
	misc:               load = KERNALRELOCH, run = KERNALH, type = ro;
	load2:              load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2a:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2b:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2c:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2d:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2f:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2h:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2i1:           load = KERNALRELOCH, run = KERNALH, type = ro;
	inline:             load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2j:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2k:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2l1:           load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2l2:           load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2m:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph2n:            load = KERNALRELOCH, run = KERNALH, type = ro;
	scanline:           load = BANK0RELOC, run = BANK0, type = ro;
	process1:           load = KERNALRELOCH, run = KERNALH, type = ro;
	process2:           load = KERNALRELOCH, run = KERNALH, type = ro;
	process3a:          load = KERNALRELOCH, run = KERNALH, type = ro;
	process3aa:         load = KERNALRELOCH, run = KERNALH, type = ro;
	process3b:          load = KERNALRELOCH, run = KERNALH, type = ro;
	process3c:          load = KERNALRELOCH, run = KERNALH, type = ro;
	sprites:            load = KERNALRELOCH, run = KERNALH, type = ro;
	math1a1:            load = KERNALRELOCH, run = KERNALH, type = ro;
	math1a2:            load = KERNALRELOCH, run = KERNALH, type = ro;
	math1b:             load = KERNALRELOCL, run = KERNALL, type = ro;
	math1c1:            load = KERNALRELOCH, run = KERNALH, type = ro;
	math1c2:            load = KERNALRELOCH, run = KERNALH, type = ro;
	math1d:             load = KERNALRELOCH, run = KERNALH, type = ro;
	memory2:            load = KERNALRELOCH, run = KERNALH, type = ro;
	mouse1:             load = KERNALRELOCH, run = KERNALH, type = ro;
	panic1:             load = KERNALRELOCH, run = KERNALH, type = ro;
	panic2:             load = KERNALRELOCH, run = KERNALH, type = ro;
	panic3:             load = KERNALRELOCH, run = KERNALH, type = ro;
	serial2:            load = KERNALRELOCH, run = KERNALH, type = ro;
	patterns:           load = BANK0RELOC, run = BANK0, type = ro;
	fonts1:             load = KERNALRELOCH, run = KERNALH, type = ro;
	bswfont:            load = KERNALRELOCH, run = KERNALH, type = ro;
	memory3:            load = KERNALRELOCH, run = KERNALH, type = ro;
	load3:              load = KERNALRELOCH, run = KERNALH, type = ro;
	files6a:            load = KERNALRELOCH, run = KERNALH, type = ro;
	files6b:            load = KERNALRELOCH, run = KERNALH, type = ro;
	files6c:            load = KERNALRELOCH, run = KERNALH, type = ro;
	deskacc1:           load = KERNALRELOCH, run = KERNALH, type = ro;
	load4b:             load = KERNALRELOCH, run = KERNALH, type = ro;
	deskacc2:           load = KERNALRELOCH, run = KERNALH, type = ro;
	files7:             load = KERNALRELOCH, run = KERNALH, type = ro;
	deskacc3:           load = KERNALRELOCH, run = KERNALH, type = ro;
	files8:             load = KERNALRELOCH, run = KERNALH, type = ro;
	files9:             load = KERNALRELOCH, run = KERNALH, type = ro;
	files10:            load = KERNALRELOCH, run = KERNALH, type = ro;
	init4:              load = KERNALRELOCH, run = KERNALH, type = ro;
	fonts2:             load = KERNALRELOCL, run = KERNALL, type = ro;
	fonts3:             load = KERNALRELOCL, run = KERNALL, type = ro;
	fonts4:             load = KERNALRELOCL, run = KERNALL, type = ro;
	fonts4a:            load = KERNALRELOCL, run = KERNALL, type = ro;
	fonts4b:            load = KERNALRELOCH, run = KERNALH, type = ro;
	graph3a:            load = KERNALRELOCL, run = KERNALL, type = ro;
	graph3b:            load = KERNALRELOCL, run = KERNALL, type = ro;
	graph3c:            load = KERNALRELOCL, run = KERNALL, type = ro;
	conio1:             load = KERNALRELOCL, run = KERNALL, type = ro;
	conio2:             load = KERNALRELOCL, run = KERNALL, type = ro;
	conio3a:            load = KERNALRELOCL, run = KERNALL, type = ro;
	conio3b:            load = KERNALRELOCL, run = KERNALL, type = ro;
	conio4:             load = KERNALRELOCL, run = KERNALL, type = ro;
	conio5:             load = KERNALRELOCL, run = KERNALL, type = ro;
	conio6:             load = KERNALRELOCL, run = KERNALL, type = ro;
	math2:              load = KERNALRELOCL, run = KERNALL, type = ro;
	graph4:             load = KERNALRELOCL, run = KERNALL, type = ro;
	mouse2:             load = KERNALRELOCH, run = KERNALH, type = ro;
	menu1:              load = KERNALRELOCH, run = KERNALH, type = ro;
	menu2:              load = KERNALRELOCH, run = KERNALH, type = ro;
	menu3:              load = KERNALRELOCH, run = KERNALH, type = ro;
	icon1:              load = KERNALRELOCH, run = KERNALH, type = ro;
	mouse3:             load = KERNALRELOCH, run = KERNALH, type = ro;
	icon2:              load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1a:           load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1b:           load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1c:           load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1d:           load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1e1:          load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1e2:          load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1f:           load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1g:           load = KERNALRELOCH, run = KERNALH, type = ro;
	dlgbox1h:           load = DRIVE, run = DRIVE, type = ro;
	dlgbox1i:           load = ICONS, run = ICONS, type = ro;
	dlgbox1j:           load = DRIVE, run = DRIVE, type = ro;
	dlgbox1k:           load = DRIVE, run = DRIVE, type = ro;
	mouse4:             load = KERNALRELOCH, run = KERNALH, type = ro;
	irq:                load = KERNALRELOCH, run = KERNALH, type = ro;
	keyboard1:          load = LOKERNAL, type = ro;
	keyboard2:          load = BANK0RELOC, run = BANK0, type = ro;
	keyboard3:          load = LOKERNAL, type = ro;
	time1:              load = KERNALRELOCH, run = KERNALH, type = ro;

	# input driver
	inputdrv:           load = INPUTDRVRELOC, run = INPUTDRV, type = ro;
}
